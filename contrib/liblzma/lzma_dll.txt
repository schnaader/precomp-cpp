lib /def:liblzma.def /out:liblzma.lib /machine:ix86
lib /def:liblzma.def /out:liblzma.lib /machine:x64

Linking against liblzma
-----------------------

MinGW

    If you use MinGW, linking against liblzma.dll or liblzma.a should
    be straightforward. You don't need an import library to link
    against liblzma.dll, and for static linking, you don't need to
    worry about the LZMA_API_STATIC macro.

    Note that the MinGW distribution includes liblzma. If you are
    building packages that will be part of the MinGW distribution, you
    probably should use the version of liblzma shipped in MinGW instead
    of this package.


Microsoft Visual C++

    To link against liblzma.dll, you need to create an import library
    first. You need the "lib" command from MSVC and liblzma.def from
    the "doc" directory of this package. Here is the command that works
    on 32-bit x86:

        lib /def:liblzma.def /out:liblzma.lib /machine:ix86

    On x86-64, the /machine argument has to naturally be changed:

        lib /def:liblzma.def /out:liblzma.lib /machine:x64

    If you need to link statically against liblzma, you should build
    liblzma with MSVC 2013 update 2 or later. Alternatively, if having
    a decompressor is enough, consider using XZ Embedded or LZMA SDK.

    When you plan to link against static liblzma, you need to tell
    lzma.h to not use __declspec(dllimport) by defining the macro
    LZMA_API_STATIC. You can do it either in the C/C++ code

        #define LZMA_API_STATIC
        #include <lzma.h>

    or by adding it to compiler options.
